{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c68fdbab-d9e3-4cfb-a09f-0f3c53e2e9d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import cv2\n",
    "import numpy as np\n",
    "from ultralytics import YOLO\n",
    "from tensorflow.keras.applications import MobileNetV2\n",
    "from tensorflow.keras.applications.resnet50 import preprocess_input\n",
    "from tensorflow.keras.models import load_model\n",
    "from tensorflow.keras.preprocessing import image\n",
    "import tensorflow as tf\n",
    "import torch\n",
    "\n",
    "# Check if GPU is available\n",
    "print(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))\n",
    "\n",
    "# Load YOLOv5 model\n",
    "model_yolo = YOLO('YOLO/train22/weights/best.pt')\n",
    "\n",
    "# Load the saved MobileNetV2 models\n",
    "#mobilenetv2_model_1 = load_model(\"model/TrainedModelT8\")\n",
    "#mobilenetv2_model_2 = load_model(\"model/TrainedModelT7\")\n",
    "Resnet_model = load_model(\"model/TESTTTunknown\")\n",
    "# Add more models as needed\n",
    "\n",
    "# Define class names\n",
    "#class_names = ['Blacktip', 'Emperor Angelfish', 'Clownfish', 'Eagleray', 'Jellyfish', 'Unknown']\n",
    "class_names = ['Blacktip', 'Clownfish', 'Eagle ray', 'Emperor Angelfish', 'Jellyfish', 'Unknown']\n",
    "\n",
    "# Crop fish from frame using bounding box coordinates\n",
    "def crop_fish_from_frame(frame, bbox):\n",
    "    x1, y1, x2, y2 = bbox\n",
    "    cropped_fish = frame[y1:y2, x1:x2]\n",
    "    return cropped_fish\n",
    "\n",
    "# Classify fish species using MobileNetV2 ensemble\n",
    "def classify_fish_species_mobilenetv2_ensemble(models, cropped_fish):\n",
    "    predictions = []\n",
    "    for model in models:\n",
    "        img = cv2.resize(cropped_fish, (224, 224))  # Resize image to match the expected input shape\n",
    "        img = image.img_to_array(img)\n",
    "        img = np.expand_dims(img, axis=0)\n",
    "        img = preprocess_input(img)\n",
    "\n",
    "        # Make predictions using the current model\n",
    "        prediction = model.predict(img)\n",
    "        predictions.append(prediction)\n",
    "\n",
    "    # Combine predictions from all models\n",
    "    ensemble_prediction = np.mean(predictions, axis=0)\n",
    "    return ensemble_prediction\n",
    "\n",
    "# Open camera capture device\n",
    "cap = cv2.VideoCapture(1)  # Use 0 for default camera device\n",
    "\n",
    "# Define detection threshold\n",
    "threshold = 0.5\n",
    "\n",
    "# Loop to capture frames from camera feed\n",
    "while True:\n",
    "    # Read frame from camera feed\n",
    "    ret, frame = cap.read()\n",
    "    if not ret:\n",
    "        break\n",
    "\n",
    "    # Perform object detection on frame (FISH NO FISH)\n",
    "    results = model_yolo(frame)[0]\n",
    "\n",
    "    # Loop through detected objects and draw bounding boxes\n",
    "    for result in results.boxes.data.tolist():\n",
    "        x1, y1, x2, y2, conf, class_id = result\n",
    "\n",
    "        if conf > threshold: #This is for FISH NO FISH (LESS RANDOM DATA)\n",
    "            cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 4)\n",
    "            \n",
    "            # Classify fish species using MobileNetV2 ensemble\n",
    "            cropped_fish = crop_fish_from_frame(frame, (int(x1), int(y1), int(x2), int(y2)))\n",
    "            #predictions = classify_fish_species_mobilenetv2_ensemble([mobilenetv2_model_1, mobilenetv2_model_2, Resnet_model], cropped_fish)\n",
    "            predictions = classify_fish_species_mobilenetv2_ensemble( [Resnet_model], cropped_fish)\n",
    "            predicted_class_id = np.argmax(predictions)\n",
    "            confidence = np.max(predictions)\n",
    "            predicted_class_name = class_names[predicted_class_id]\n",
    "\n",
    "            if confidence > 0.80:\n",
    "                cv2.putText(frame, predicted_class_name, (int(x1), int(y1 - 10)),\n",
    "                             cv2.FONT_HERSHEY_SIMPLEX, 1.3, (0, 255, 0), 3, cv2.LINE_AA)\n",
    "            else: \n",
    "                cv2.putText(frame, 'Unknown', (int(x1), int(y1 - 10)),\n",
    "                             cv2.FONT_HERSHEY_SIMPLEX, 1.3, (0, 255, 0), 3, cv2.LINE_AA)   \n",
    "           \n",
    "\n",
    "    # Show processed frame with bounding boxes\n",
    "    cv2.imshow('Fish Detection', frame)\n",
    "\n",
    "    # Break loop if 'q' key is pressed\n",
    "    if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "        break\n",
    "\n",
    "# Release camera capture device and close OpenCV windows\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "fish_detection1",
   "language": "python",
   "name": "fish_detection1"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
